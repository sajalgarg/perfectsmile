package com.adobe.sst.evip.util;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class data {
	
	/*Populating different data lists*/
	
	private static List<String> url = new ArrayList<String>(); 	
	private static List<String> users = new ArrayList<String>(); 
	private static List<String> adminUsers = new ArrayList<String>(); 
	private static List<String> creativeUsers = new ArrayList<String>();
	private static List<String> creativeMultipleUsers = new ArrayList<String>();

	private static List<String> url = new ArrayList<String>(); 
	private static List<String> synclocations = new ArrayList<String>(); 
	private static List<String> filepaths = new ArrayList<String>(); 
	private static List<String> colorurls = new ArrayList<String>(); 
	private static List<String> gmailpswds = new ArrayList<String>(); 
	private static List<String> userNames = new ArrayList<String>(); 
	
	static Random r = new Random();
	
	static {
		try {
			loadUIConfig();
		} catch (Exception e) {
			e.printStackTrace();
		}
		}
	
	public static void loadUIConfig() throws ParserConfigurationException, SAXException, IOException{
		loadElements(data.class.getName());
	    }
	
		//Reading xml file
	
	public static void loadElements(String className) throws ParserConfigurationException, SAXException, IOException{
    	File fXmlFile = new File("C:\\CCM\\TestScripts\\StormCloud\\TestData\\data.xml");
    	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();;
    	Document doc = dBuilder.parse(fXmlFile);
				
    	doc.getDocumentElement().normalize();
    	
    	//populate users list
    	
		NodeList list = doc.getElementsByTagName("user");
		for (int i = 0; i < list.getLength(); i++) {
			Node nNode = list.item(i);
			users.add(nNode.getTextContent());
		} 
		
		//populate admin users list
    	
				list = doc.getElementsByTagName("adminUser");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					adminUsers.add(nNode.getTextContent());
				} 
				
		//populate creativeUsers list
		  	
		list = doc.getElementsByTagName("creativeUser");
			for (int i = 0; i < list.getLength(); i++) {
				Node nNode = list.item(i);
				creativeUsers.add(nNode.getTextContent());
		} 
			
			//populate creativeMultipleUsers list
			  	
			list = doc.getElementsByTagName("creativeMultipleUser");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					creativeMultipleUsers.add(nNode.getTextContent());
			} 
		
		//populate urls list
    	
				list = doc.getElementsByTagName("url");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					urls.add(nNode.getTextContent());
				} 
				
		//populate synclocations list
		    	
				list = doc.getElementsByTagName("synclocation");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					synclocations.add(nNode.getTextContent());
				} 
				
		//populate filepaths list
		    	
				list = doc.getElementsByTagName("filepath");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					filepaths.add(nNode.getTextContent());
				}
				
		//populate colorurls list
		    	
				list = doc.getElementsByTagName("colorurl");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					colorurls.add(nNode.getTextContent());
				}
				
		//populate gmail password
		    	
				list = doc.getElementsByTagName("gmailpswd");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					gmailpswds.add(nNode.getTextContent());
				}
				
				list = doc.getElementsByTagName("userName");
				for (int i = 0; i < list.getLength(); i++) {
					Node nNode = list.item(i);
					userNames.add(nNode.getTextContent());
				}
				
	}
    
	//get single user from userslist
	
    public static String getUser(){
       	String user = users.get(r.nextInt(users.size()));
        users.remove(user);
    	return user;
    }
    public static String getCreativeMultipleUser(){
       	String user = creativeMultipleUsers.get(r.nextInt(creativeMultipleUsers.size()));
        adminUsers.remove(user);
    	return user;
    }

    public static String getAdminUser(){
       	String user = adminUsers.get(r.nextInt(adminUsers.size()));
        adminUsers.remove(user);
    	return user;
    }
    public static String getCreativeUser(){
       	String user = creativeUsers.get(r.nextInt(creativeUsers.size()));
        creativeUsers.remove(user);
    	return user;
    }
    
    //get single url from urllist
	
    public static String getUrl(){
       	String url = urls.get(r.nextInt(urls.size()));
        //users.remove(url);
    	return url;
    }
    
    //get single synclocation from synclocationlist
	
    public static String getSynclocation(){
       	String synclocation = synclocations.get(r.nextInt(synclocations.size()));
       //	synclocations.remove(synclocation);
    	return synclocation;
    }
    
    //get single filepath from filepathlist
	
    public static String getFilepath(){
       	String filepath = filepaths.get(r.nextInt(filepaths.size()));
       //	filepaths.remove(filepath);
    	return filepath;
    }
    
    //get single colorurl from colorurllist
	
    public static String getColorUrl(){
       	String colorurl = colorurls.get(r.nextInt(colorurls.size()));
       //	filepaths.remove(filepath);
    	return colorurl;
    }
    
    //get gmail password
	
    public static String getGmailPswd(){
       	String gmailpswd = gmailpswds.get(r.nextInt(gmailpswds.size()));
       //	filepaths.remove(filepath);
    	return gmailpswd;
    }

	public static String getUserName() {
		String userName = userNames.get(r.nextInt(userNames.size()));
	    	return userName;
	}
	
  
    
}
